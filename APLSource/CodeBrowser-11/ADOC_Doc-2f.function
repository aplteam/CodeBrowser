 ADOC_Doc
⍝ ## Overview
⍝
⍝ `CodeBrowser` is designed to collect the code of all functions, operators, classes, namespace scripts and Interfaces
⍝ within the given non-scripted namespace and compile an HTML page from it.
⍝
⍝ It's a tool to view all the code of such namespace(s) in a single HTML document. Extensive linking allows you to jump
⍝ around easily; ideal for a code review.
⍝
⍝ By default the work horse --- the function `Run` --- requires nothing but a right argument which is a list of references
⍝ pointing to non-scripted namespaces.
⍝
⍝ If that is not sufficient for you then create a parameter space by calling the `CreateParms` function. This function
⍝ will return a parameter space (that's an ordinary namespace) with defaults (ordinary variables) and inject a function
⍝ `∆List` which can be used to list all the variables and their values (defaults).
⍝
⍝ You may then make amendments to those variables and finally pass the parameter space as the (optional) left argument
⍝ to `Run`.
⍝
⍝ ## Usage
⍝
⍝ In order to use it you need to download the workspace `CodeBrowser` and the user command script `CodeBrowser_UC.dyalog`
⍝ from [GitHub](https://github.com/aplteam/CodeBrowser).
⍝
⍝ You then need to put it somewhere where Dyalog recognizes it as a user command. Restart Dyalog APL or execute the
⍝ command `]UReset` which will make it available in an already running session.
⍝
⍝ You then have three different ways of using `CodeBrowser`:
⍝
⍝ ## Use the user command `]CodeBrowser`
⍝
⍝ This is by far the easiest way to use but it comes with limitations.
⍝
⍝ To create an HTML page for a namespace `#.Foo`:
⍝
⍝ ```
⍝ ]CodeBrowser #.Foo
⍝ ```
⍝
⍝ There are several flags available which allow you to adapt the behaviour and/or the information shown by `CodeBrowser`.
⍝ However, not all parameters can be set this way. If you need to set on of the parameters that are not available via
⍝ the user command interface then you have to consider the two other ways to use `CodeBrowser` because they give you full
⍝ access to all parameter.
⍝
⍝ For a
⍝
⍝ ## Copy it into your workspace
⍝
⍝ `CodeBrowser` does not only contain a namespace `CodeBrowser`, it also contains quite a number of classes from the
⍝ [APLTree library](https://github.com/aplteam/apltree/wiki).
⍝
⍝ That's why you don't want to copy the `CodeBrowser` workspace straight into your own workspace. Instead you are
⍝ advised to do the following:
⍝
⍝ ```
⍝ 'Foo' #.⎕ns ''   ⍝ Note the #!
⍝ #.Foo.⎕CY '/path2CodeBrowser/CodeBrowser
⍝ ```
⍝ See "Example" for how to continue.
⍝
⍝ ## Copy it into `⎕SE`
⍝
⍝ For this you need the user command `]CopyIntoQSE`. Download it from [GitHub](https://github.com/aplteam/CopyIntoQSE).
⍝
⍝ You then can do this:
⍝
⍝ ```
⍝ ]CopyIntoQSE /path2CodeBrowser/CodeBrowser
⍝ ```
⍝
⍝ In case you make the `CodeBrowser` workspace a sibling of the user command script `]CopyIntoQSE` it's enough to say
⍝
⍝ ```
⍝ ]CopyIntoQSE CodeBrowser
⍝ ```
⍝
⍝ That will create a namespace `CodeBrowser` in `⎕SE` and then copy the `CodeBrowser` workspace into it.
⍝
⍝ ### Conclusion
⍝
⍝ Go for the first option (the user command `]CodeBrowser`) whenever possible.
⍝
⍝ * For the user command `]??CodeBrowser` provides detailed information regarding the parameters you may set.
⍝ * The other two options `]ADOC <path2CodeBrowser` will provide a full documentation.
⍝
⍝ ## Example
⍝
⍝ This example assumes that you have used the user command `]CopyIntoQSE` but the principle is the same no matter which
⍝ strategy you settle for.
⍝
⍝ Let's assume that you need to change some of the defaults. For that you need to create a namespace with all the defaults
⍝ in it as ordinary variables:
⍝
⍝ ```
⍝       parms←⎕SE.CodeBrowser.CodeBrowser.CreateParms
⍝       parms.author←'John Doe'
⍝       parms.show←1
⍝ ```
⍝ `show` defaults to 0. When it's a 1 then the HTML document produced by `CodeBrowser` is displayed with your default browser.
⍝
⍝ We could now use `CodeBrowser` to document itself:
⍝
⍝ ```
⍝ parms ⎕SE.CodeBrowser.CodeBrowser.Run '⎕SE.CodeBrowser.CodeBrowser'
⍝ ```
⍝
⍝ This will print the name of the HTML file create to the session, but dues to `show←1` it will also put that HTML file on display.
