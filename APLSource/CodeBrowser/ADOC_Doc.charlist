## Overview

`CodeBrowser` is designed to collect the code of all functions, operators, classes, namespace scripts, Interfaces and
even GUI instances (optionally, and only when `KeepOnClose←1`) within the given non-scripted namespace(s) and compile 
a stand-alone HTML page from it.

It's a tool to view all the code of such namespace(s) in a single HTML document. Extensive linking allows you to jump
around easily; ideal for a code review.


## Usage

In order to use it you need to download it from [GitHub](https://github.com/aplteam/CodeBrowser). All files need to go 
into a folder that is scanned by Dyalog's SALT in order to find user commands. 

Both the user command script `CodeBrowser_UC.dyalog` and the folder `CodeBrowser\` goe into that folder.

Restart Dyalog APL or execute the command `]UReset` which will make it available in an already running session.

You then have three different ways of using `CodeBrowser`:

## Use the user command `]CodeBrowser`

This is by far the easiest way to use but it comes with limitations.

To create an HTML page for a namespace `#.Foo`:

```
]CodeBrowser #.Foo
```

There are several flags available which allow you to adapt the behaviour and/or the information shown by `CodeBrowser`.

For details regarding those options and flags execute `]?CodeBrowser`.

However, not all parameters can be set this way. If you need to set one of the parameters that are not available via
the user command interface then you have to consider the two other ways to use `CodeBrowser` because they give you full
access to all parameters.


## Using the GUI

Call

```
      ]CodeBrowser -gui
```

That will show a GUI that allows you to specify or amend all parameters available. You may specify one or more 
namespaces together with the `-gui` flag but no other flags. If you try anway an error is thrown.


## Load it into `⎕SE`

Use this only when you want to take advantage of parameters that are not available via the user command interface but
you want to create CodeBrowser's HTML page under program control. In this case the GUI is not suitable of course.

`CodeBrowser` does not only comprise a namespace `CodeBrowser`, it also needs quite a number of classes from the
[APLTree library](https://github.com/aplteam/apltree/wiki).

That and possible name clashes are the reasons why you don't want to copy the `CodeBrowser` workspace straight into 
your own workspace. Instead you are advised to take advantage of the `-load` flag:

```
      ]CodeBrowser -load
```

This will load the `CodeBrowser` namespace as well as all the classes and namespace scripts needed into `⎕SE.CodeBrowser`.
It will also establish two functions, `⎕SE.CodeBrowser.CreateParms` as well as `⎕SE.CodeBrowser.Run`. You can use these
to amend all parameters you want and then path them as right argument to the `Run` function.

Note that in case you specify any other parameters or flags together with the `-load` flag they will be ignored: the
`-load` flag takes presedence.

### Example

```
      ]CodeBrowser -load 
      parms←⎕SE.CodeBrowser.CreateParms ⍬
      parms.caption←'My First Ty'
      parms ⎕SE.CodeBrowser.Run #
```

Note that you can get a list of all (almost) parameters with their current values by calling the `∆List` function:

```
      ⎕SE.CodeBrowser.CreateParms.∆List
```
